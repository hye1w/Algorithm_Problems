import java.util.*;

class Solution {
    public int solution(String begin, String target, String[] words) {
        Set<String> wordSet = new HashSet<>(Arrays.asList(words));
        if (!wordSet.contains(target)) return 0;  
        
        Queue<WordNode> queue = new LinkedList<>();
        queue.add(new WordNode(begin, 0));
        
        while (!queue.isEmpty()) {
            WordNode node = queue.poll();
            String word = node.word;
            int depth = node.depth;
            
            if (word.equals(target)) return depth;
            
            Iterator<String> it = wordSet.iterator();
            while (it.hasNext()) {
                String nextWord = it.next();
                if (isOneLetterDifferent(word, nextWord)) {
                    queue.add(new WordNode(nextWord, depth + 1));
                    it.remove(); 
                }
            }
        }
        
        return 0; 
    }
    
    private boolean isOneLetterDifferent(String word1, String word2) {
        int count = 0;
        for (int i = 0; i < word1.length(); i++) {
            if (word1.charAt(i) != word2.charAt(i)) {
                count++;
                if (count > 1) return false;
            }
        }
        return count == 1;
    }
    
    class WordNode {
        String word;
        int depth;
        
        WordNode(String word, int depth) {
            this.word = word;
            this.depth = depth;
        }
    }
}
